/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZsaleInterface extends ethers.utils.Interface {
  functions: {
    "consumed(bytes32)": FunctionFragment;
    "purchase(bytes,uint256,address,uint256,address,uint256,uint256)": FunctionFragment;
    "recover(bytes32,bytes)": FunctionFragment;
    "toEthSignedMessageHash(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "consumed", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toEthSignedMessageHash",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "consumed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toEthSignedMessageHash",
    data: BytesLike
  ): Result;

  events: {
    "Purchased(address,address,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Purchased"): EventFragment;
}

export class Zsale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZsaleInterface;

  functions: {
    consumed(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * recovers sellers's signature based on buyer's proposed data and, if sale data hash matches the message hash, transfers nft and payment
     * @param nftaddress contract address of the nft we are transferring
     * @param price eth amount bid
     * @param seller address of who the buyer says the seller is, for confirmation of the recovered seller
     * @param signature type encoded message signed by the seller
     * @param tokenid token id we are transferring
     */
    purchase(
      signature: BytesLike,
      auctionid: BigNumberish,
      seller: string,
      price: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      expireblock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  consumed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * recovers sellers's signature based on buyer's proposed data and, if sale data hash matches the message hash, transfers nft and payment
   * @param nftaddress contract address of the nft we are transferring
   * @param price eth amount bid
   * @param seller address of who the buyer says the seller is, for confirmation of the recovered seller
   * @param signature type encoded message signed by the seller
   * @param tokenid token id we are transferring
   */
  purchase(
    signature: BytesLike,
    auctionid: BigNumberish,
    seller: string,
    price: BigNumberish,
    nftaddress: string,
    tokenid: BigNumberish,
    expireblock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recover(
    hash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  toEthSignedMessageHash(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    consumed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    /**
     * recovers sellers's signature based on buyer's proposed data and, if sale data hash matches the message hash, transfers nft and payment
     * @param nftaddress contract address of the nft we are transferring
     * @param price eth amount bid
     * @param seller address of who the buyer says the seller is, for confirmation of the recovered seller
     * @param signature type encoded message signed by the seller
     * @param tokenid token id we are transferring
     */
    purchase(
      signature: BytesLike,
      auctionid: BigNumberish,
      seller: string,
      price: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      expireblock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    Purchased(
      seller?: string | null,
      buyer?: string | null,
      amount?: null,
      nftaddress?: null,
      tokenid?: null,
      expireblock?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, BigNumber],
      {
        seller: string;
        buyer: string;
        amount: BigNumber;
        nftaddress: string;
        tokenid: BigNumber;
        expireblock: BigNumber;
      }
    >;
  };

  estimateGas: {
    consumed(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * recovers sellers's signature based on buyer's proposed data and, if sale data hash matches the message hash, transfers nft and payment
     * @param nftaddress contract address of the nft we are transferring
     * @param price eth amount bid
     * @param seller address of who the buyer says the seller is, for confirmation of the recovered seller
     * @param signature type encoded message signed by the seller
     * @param tokenid token id we are transferring
     */
    purchase(
      signature: BytesLike,
      auctionid: BigNumberish,
      seller: string,
      price: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      expireblock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consumed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * recovers sellers's signature based on buyer's proposed data and, if sale data hash matches the message hash, transfers nft and payment
     * @param nftaddress contract address of the nft we are transferring
     * @param price eth amount bid
     * @param seller address of who the buyer says the seller is, for confirmation of the recovered seller
     * @param signature type encoded message signed by the seller
     * @param tokenid token id we are transferring
     */
    purchase(
      signature: BytesLike,
      auctionid: BigNumberish,
      seller: string,
      price: BigNumberish,
      nftaddress: string,
      tokenid: BigNumberish,
      expireblock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recover(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
